---
kind: "ConfigMap"
apiVersion: "v1"
data:
  containers.input.conf: "# This configuration file for Fluentd / td-agent is used\n\
    # to watch changes to Docker log files. The kubelet creates symlinks that\n# capture\
    \ the pod name, namespace, container name & Docker container ID\n# to the docker\
    \ logs for pods in the /var/log/containers directory on the host.\n# If running\
    \ this fluentd configuration in a Docker container, the /var/log\n# directory\
    \ should be mounted in the container.\n#\n# These logs are then submitted to Elasticsearch\
    \ which assumes the\n# installation of the fluent-plugin-elasticsearch & the\n\
    # fluent-plugin-kubernetes_metadata_filter plugins.\n# See https://github.com/uken/fluent-plugin-elasticsearch\
    \ &\n# https://github.com/fabric8io/fluent-plugin-kubernetes_metadata_filter for\n\
    # more information about the plugins.\n#\n# Example\n# =======\n# A line in the\
    \ Docker log file might look like this JSON:\n#\n# {\"log\":\"2014/09/25 21:15:03\
    \ Got request with path wombat\\n\",\n#  \"stream\":\"stderr\",\n#   \"time\"\
    :\"2014-09-25T21:15:03.499185026Z\"}\n#\n# The time_format specification below\
    \ makes sure we properly\n# parse the time format produced by Docker. This will\
    \ be\n# submitted to Elasticsearch and should appear like:\n# $ curl 'http://elasticsearch-logging:9200/_search?pretty'\n\
    # ...\n# {\n#      \"_index\" : \"logstash-2014.09.25\",\n#      \"_type\" : \"\
    fluentd\",\n#      \"_id\" : \"VBrbor2QTuGpsQyTCdfzqA\",\n#      \"_score\" :\
    \ 1.0,\n#      \"_source\":{\"log\":\"2014/09/25 22:45:50 Got request with path\
    \ wombat\\n\",\n#                 \"stream\":\"stderr\",\"tag\":\"docker.container.all\"\
    ,\n#                 \"@timestamp\":\"2014-09-25T22:45:50+00:00\"}\n#    },\n\
    # ...\n#\n# The Kubernetes fluentd plugin is used to write the Kubernetes metadata\
    \ to the log\n# record & add labels to the log record if properly configured.\
    \ This enables users\n# to filter & search logs on any metadata.\n# For example\
    \ a Docker container's logs might be in the directory:\n#\n#  /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b\n\
    #\n# and in the file:\n#\n#  997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log\n\
    #\n# where 997599971ee6... is the Docker ID of the running container.\n# The Kubernetes\
    \ kubelet makes a symbolic link to this file on the host machine\n# in the /var/log/containers\
    \ directory which includes the pod name and the Kubernetes\n# container name:\n\
    #\n#    synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n\
    #    ->\n#    /var/lib/docker/containers/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b/997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b-json.log\n\
    #\n# The /var/log directory on the host is mapped to the /var/log directory in\
    \ the container\n# running this instance of Fluentd and we end up collecting the\
    \ file:\n#\n#   /var/log/containers/synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n\
    #\n# This results in the tag:\n#\n#  var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n\
    #\n# The Kubernetes fluentd plugin is used to extract the namespace, pod name\
    \ & container name\n# which are added to the log message as a kubernetes field\
    \ object & the Docker container ID\n# is also added under the docker field object.\n\
    # The final tag is:\n#\n#   kubernetes.var.log.containers.synthetic-logger-0.25lps-pod_default_synth-lgr-997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b.log\n\
    #\n# And the final log record look like:\n#\n# {\n#   \"log\":\"2014/09/25 21:15:03\
    \ Got request with path wombat\\n\",\n#   \"stream\":\"stderr\",\n#   \"time\"\
    :\"2014-09-25T21:15:03.499185026Z\",\n#   \"kubernetes\": {\n#     \"namespace\"\
    : \"default\",\n#     \"pod_name\": \"synthetic-logger-0.25lps-pod\",\n#     \"\
    container_name\": \"synth-lgr\"\n#   },\n#   \"docker\": {\n#     \"container_id\"\
    : \"997599971ee6366d4a5920d25b79286ad45ff37a74494f262e3bc98d909d0a7b\"\n#   }\n\
    # }\n#\n# This makes it easier for users to search for logs by pod name or by\n\
    # the name of the Kubernetes container regardless of how many times the\n# Kubernetes\
    \ pod has been restarted (resulting in a several Docker container IDs).\n\n# Json\
    \ Log Example:\n# {\"log\":\"[info:2016-02-16T16:04:05.930-08:00] Some log text\
    \ here\\n\",\"stream\":\"stdout\",\"time\":\"2016-02-17T00:04:05.931087621Z\"\
    }\n# CRI Log Example:\n# 2016-02-17T00:04:05.931087621Z stdout F [info:2016-02-16T16:04:05.930-08:00]\
    \ Some log text here\n<source>\n  @id fluentd-containers.log\n  @type tail\n \
    \ path /var/log/containers/*.log\n  pos_file /var/log/es-containers.log.pos\n\
    \  time_format %Y-%m-%dT%H:%M:%S.%NZ\n  tag raw.kubernetes.*\n  read_from_head\
    \ true\n  <parse>\n    @type multi_format\n    <pattern>\n      format json\n\
    \      time_key time\n      time_format %Y-%m-%dT%H:%M:%S.%NZ\n    </pattern>\n\
    \    <pattern>\n      format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/\n\
    \      time_format %Y-%m-%dT%H:%M:%S.%N%:z\n    </pattern>\n  </parse>\n</source>\n\
    \n# Detect exceptions in the log output and forward them as one log entry.\n<match\
    \ raw.kubernetes.**>\n  @id raw.kubernetes\n  @type detect_exceptions\n  remove_tag_prefix\
    \ raw\n  message log\n  stream stream\n  multiline_flush_interval 5\n  max_bytes\
    \ 500000\n  max_lines 1000\n</match>"
  output.conf: "# Enriches records with Kubernetes metadata\n<filter kubernetes.**>\n\
    \  @type kubernetes_metadata\n</filter>\n\n<match **>\n  @id elasticsearch\n \
    \ @type elasticsearch\n  @log_level info\n  include_tag_key true\n  host elasticsearch-logging\n\
    \  port 9200\n  logstash_format true\n  <buffer>\n    @type file\n    path /var/log/fluentd-buffers/kubernetes.system.buffer\n\
    \    flush_mode interval\n    retry_type exponential_backoff\n    flush_thread_count\
    \ 2\n    flush_interval 5s\n    retry_forever\n    retry_max_interval 30\n   \
    \ chunk_limit_size 2M\n    queue_limit_length 8\n    overflow_action block\n \
    \ </buffer>\n</match>"
  system.conf: "<system>\n  root_dir /tmp/fluentd-buffers/\n</system>"
  forward.input.conf: "# Takes the messages sent over TCP\n<source>\n  @type forward\n\
    </source>"
  system.input.conf: "# Example:\n# 2015-12-21 23:17:22,066 [salt.state       ][INFO\
    \    ] Completed state [net.ipv4.ip_forward] at time 23:17:22.066081\n<source>\n\
    \  @id minion\n  @type tail\n  format /^(?<time>[^ ]* [^ ,]*)[^\\[]*\\[[^\\]]*\\\
    ]\\[(?<severity>[^ \\]]*) *\\] (?<message>.*)$/\n  time_format %Y-%m-%d %H:%M:%S\n\
    \  path /var/log/salt/minion\n  pos_file /var/log/salt.pos\n  tag salt\n</source>\n\
    \n# Example:\n# Dec 21 23:17:22 gke-foo-1-1-4b5cbd14-node-4eoj startupscript:\
    \ Finished running startup script /var/run/google.startup.script\n<source>\n \
    \ @id startupscript.log\n  @type tail\n  format syslog\n  path /var/log/startupscript.log\n\
    \  pos_file /var/log/es-startupscript.log.pos\n  tag startupscript\n</source>\n\
    \n# Examples:\n# time=\"2016-02-04T06:51:03.053580605Z\" level=info msg=\"GET\
    \ /containers/json\"\n# time=\"2016-02-04T07:53:57.505612354Z\" level=error msg=\"\
    HTTP Error\" err=\"No such image: -f\" statusCode=404\n# TODO(random-liu): Remove\
    \ this after cri container runtime rolls out.\n<source>\n  @id docker.log\n  @type\
    \ tail\n  format /^time=\"(?<time>[^)]*)\" level=(?<severity>[^ ]*) msg=\"(?<message>[^\"\
    ]*)\"( err=\"(?<error>[^\"]*)\")?( statusCode=($<status_code>\\d+))?/\n  path\
    \ /var/log/docker.log\n  pos_file /var/log/es-docker.log.pos\n  tag docker\n</source>\n\
    \n# Example:\n# 2016/02/04 06:52:38 filePurge: successfully removed file /var/etcd/data/member/wal/00000000000006d0-00000000010a23d1.wal\n\
    <source>\n  @id etcd.log\n  @type tail\n  # Not parsing this, because it doesn't\
    \ have anything particularly useful to\n  # parse out of it (like severities).\n\
    \  format none\n  path /var/log/etcd.log\n  pos_file /var/log/es-etcd.log.pos\n\
    \  tag etcd\n</source>\n\n# Multi-line parsing is required for all the kube logs\
    \ because very large log\n# statements, such as those that include entire object\
    \ bodies, get split into\n# multiple lines by glog.\n\n# Example:\n# I0204 07:32:30.020537\
    \    3368 server.go:1048] POST /stats/container/: (13.972191ms) 200 [[Go-http-client/1.1]\
    \ 10.244.1.3:40537]\n<source>\n  @id kubelet.log\n  @type tail\n  format multiline\n\
    \  multiline_flush_interval 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\\
    w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n\
    \  time_format %m%d %H:%M:%S.%N\n  path /var/log/kubelet.log\n  pos_file /var/log/es-kubelet.log.pos\n\
    \  tag kubelet\n</source>\n\n# Example:\n# I1118 21:26:53.975789       6 proxier.go:1096]\
    \ Port \"nodePort for kube-system/default-http-backend:http\" (:31429/tcp) was\
    \ open before and is still needed\n<source>\n  @id kube-proxy.log\n  @type tail\n\
    \  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\\
    d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^\
    \ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/kube-proxy.log\n\
    \  pos_file /var/log/es-kube-proxy.log.pos\n  tag kube-proxy\n</source>\n\n# Example:\n\
    # I0204 07:00:19.604280       5 handlers.go:131] GET /api/v1/nodes: (1.624207ms)\
    \ 200 [[kube-controller-manager/v1.1.3 (linux/amd64) kubernetes/6a81b50] 127.0.0.1:38266]\n\
    <source>\n  @id kube-apiserver.log\n  @type tail\n  format multiline\n  multiline_flush_interval\
    \ 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\\
    d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format\
    \ %m%d %H:%M:%S.%N\n  path /var/log/kube-apiserver.log\n  pos_file /var/log/es-kube-apiserver.log.pos\n\
    \  tag kube-apiserver\n</source>\n\n# Example:\n# I0204 06:55:31.872680      \
    \ 5 servicecontroller.go:277] LB already exists and doesn't need update for service\
    \ kube-system/kube-ui\n<source>\n  @id kube-controller-manager.log\n  @type tail\n\
    \  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\\
    d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^\
    \ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/kube-controller-manager.log\n\
    \  pos_file /var/log/es-kube-controller-manager.log.pos\n  tag kube-controller-manager\n\
    </source>\n\n# Example:\n# W0204 06:49:18.239674       7 reflector.go:245] pkg/scheduler/factory/factory.go:193:\
    \ watch of *api.Service ended with: 401: The event in requested index is outdated\
    \ and cleared (the requested history has been cleared [2578313/2577886]) [2579312]\n\
    <source>\n  @id kube-scheduler.log\n  @type tail\n  format multiline\n  multiline_flush_interval\
    \ 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\\
    d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format\
    \ %m%d %H:%M:%S.%N\n  path /var/log/kube-scheduler.log\n  pos_file /var/log/es-kube-scheduler.log.pos\n\
    \  tag kube-scheduler\n</source>\n\n# Example:\n# I1104 10:36:20.242766      \
    \ 5 rescheduler.go:73] Running Rescheduler\n<source>\n  @id rescheduler.log\n\
    \  @type tail\n  format multiline\n  multiline_flush_interval 5s\n  format_firstline\
    \ /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\\
    d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n\
    \  path /var/log/rescheduler.log\n  pos_file /var/log/es-rescheduler.log.pos\n\
    \  tag rescheduler\n</source>\n\n# Example:\n# I0603 15:31:05.793605       6 cluster_manager.go:230]\
    \ Reading config from path /etc/gce.conf\n<source>\n  @id glbc.log\n  @type tail\n\
    \  format multiline\n  multiline_flush_interval 5s\n  format_firstline /^\\w\\\
    d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^\
    \ \\]]+)\\] (?<message>.*)/\n  time_format %m%d %H:%M:%S.%N\n  path /var/log/glbc.log\n\
    \  pos_file /var/log/es-glbc.log.pos\n  tag glbc\n</source>\n\n# Example:\n# I0603\
    \ 15:31:05.793605       6 cluster_manager.go:230] Reading config from path /etc/gce.conf\n\
    <source>\n  @id cluster-autoscaler.log\n  @type tail\n  format multiline\n  multiline_flush_interval\
    \ 5s\n  format_firstline /^\\w\\d{4}/\n  format1 /^(?<severity>\\w)(?<time>\\\
    d{4} [^\\s]*)\\s+(?<pid>\\d+)\\s+(?<source>[^ \\]]+)\\] (?<message>.*)/\n  time_format\
    \ %m%d %H:%M:%S.%N\n  path /var/log/cluster-autoscaler.log\n  pos_file /var/log/es-cluster-autoscaler.log.pos\n\
    \  tag cluster-autoscaler\n</source>\n\n# Logs from systemd-journal for interesting\
    \ services.\n# TODO(random-liu): Remove this after cri container runtime rolls\
    \ out.\n<source>\n  @id journald-docker\n  @type systemd\n  filters [{ \"_SYSTEMD_UNIT\"\
    : \"docker.service\" }]\n  <storage>\n    @type local\n    persistent true\n \
    \ </storage>\n  read_from_head true\n  tag docker\n</source>\n\n<source>\n  @id\
    \ journald-container-runtime\n  @type systemd\n  filters [{ \"_SYSTEMD_UNIT\"\
    : \"{{ container_runtime }}.service\" }]\n  <storage>\n    @type local\n    persistent\
    \ true\n  </storage>\n  read_from_head true\n  tag container-runtime\n</source>\n\
    \n<source>\n  @id journald-kubelet\n  @type systemd\n  filters [{ \"_SYSTEMD_UNIT\"\
    : \"kubelet.service\" }]\n  <storage>\n    @type local\n    persistent true\n\
    \  </storage>\n  read_from_head true\n  tag kubelet\n</source>\n\n<source>\n \
    \ @id journald-node-problem-detector\n  @type systemd\n  filters [{ \"_SYSTEMD_UNIT\"\
    : \"node-problem-detector.service\" }]\n  <storage>\n    @type local\n    persistent\
    \ true\n  </storage>\n  read_from_head true\n  tag node-problem-detector\n</source>\n\
    \n<source>\n  @id kernel\n  @type systemd\n  filters [{ \"_TRANSPORT\": \"kernel\"\
    \ }]\n  <storage>\n    @type local\n    persistent true\n  </storage>\n  <entry>\n\
    \    fields_strip_underscores true\n    fields_lowercase true\n  </entry>\n  read_from_head\
    \ true\n  tag kernel\n</source>"
  monitoring.conf: "# Prometheus Exporter Plugin\n# input plugin that exports metrics\n\
    <source>\n  @type prometheus\n</source>\n\n<source>\n  @type monitor_agent\n</source>\n\
    \n# input plugin that collects metrics from MonitorAgent\n<source>\n  @type prometheus_monitor\n\
    \  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n# input plugin that\
    \ collects metrics for output plugin\n<source>\n  @type prometheus_output_monitor\n\
    \  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n# input plugin that\
    \ collects metrics for in_tail plugin\n<source>\n  @type prometheus_tail_monitor\n\
    \  <labels>\n    host ${hostname}\n  </labels>\n</source>"
binaryData: {}
metadata:
  namespace: "fluentd-es"
  annotations: {}
  name: "fluentd-es-config-v0.1.4"
  labels:
    addonmanager.kubernetes.io/mode: "Reconcile"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "services"
  - "namespaces"
  - "endpoints"
  verbs:
  - "get"
metadata:
  annotations: {}
  name: "elasticsearch-logging"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "elasticsearch-logging"

---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations: {}
  name: "kibana-lb"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "kibana"
    kubernetes.io/name: "Kibana"
    nirmata.io/component: "kibana-logging"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "LoadBalancer"
  selector:
    k8s-app: "kibana-logging"
    nirmata.io/component: "kibana-logging"
  ports:
  - port: 5601
    protocol: "TCP"
    targetPort: "ui"

---
apiVersion: "apps/v1"
kind: "DaemonSet"
metadata:
  namespace: "fluentd-es"
  annotations: {}
  name: "fluentd-es-v2.0.4"
  labels:
    kubernetes.io/cluster-service: "true"
    version: "v2.0.4"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "fluentd-es"
    nirmata.io/component: "fluentd-es-v2.0.4"
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      version: "v2.0.4"
      k8s-app: "fluentd-es"
      nirmata.io/component: "fluentd-es-v2.0.4"
    matchExpressions: []
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        kubernetes.io/cluster-service: "true"
        nirmata.io/application.type: "cluster-addon"
        nirmata.io/component: "fluentd-es-v2.0.4"
        nirmata.io/application.addon.type: "Logging"
        version: "v2.0.4"
        k8s-app: "fluentd-es"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "fluentd-es"
      volumes:
      - name: "varlog"
        hostPath:
          path: "/var/log"
      - name: "varlibdockercontainers"
        hostPath:
          path: "/var/lib/docker/containers"
      - name: "config-volume"
        configMap:
          name: "fluentd-es-config-v0.1.4"
      containers:
      - name: "fluentd-es"
        image: "k8s.gcr.io/fluentd-elasticsearch:v2.0.4"
        command: []
        args: []
        env:
        - name: "FLUENTD_ARGS"
          value: "--no-supervisor -q"
        volumeMounts:
        - name: "varlog"
          mountPath: "/var/log"
        - name: "varlibdockercontainers"
          readOnly: true
          mountPath: "/var/lib/docker/containers"
        - name: "config-volume"
          mountPath: "/etc/fluent/config.d"
        resources:
          limits:
            memory: "500Mi"
          requests:
            cpu: "100m"
            memory: "200Mi"
  updateStrategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxUnavailable: 1

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  namespace: "fluentd-es"
  annotations: {}
  name: "elasticsearch-logging"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "elasticsearch-logging"
subjects:
- apiGroup: ""
  kind: "ServiceAccount"
  name: "elasticsearch-logging"
  namespace: "fluentd-es"
roleRef:
  apiGroup: ""
  kind: "ClusterRole"
  name: "elasticsearch-logging"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "fluentd-es"
  name: "fluentd-es"
  labels:
    k8s-app: "fluentd-es"
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"

---
apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  namespace: "fluentd-es"
  annotations: {}
  name: "elasticsearch-logging"
  labels:
    kubernetes.io/cluster-service: "true"
    version: "v5.6.4"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "elasticsearch-logging"
    nirmata.io/component: "elasticsearch-logging"
spec:
  podManagementPolicy: "OrderedReady"
  replicas: 2
  serviceName: "elasticsearch-logging"
  selector:
    matchLabels:
      version: "v5.6.4"
      k8s-app: "elasticsearch-logging"
      nirmata.io/component: "elasticsearch-logging"
    matchExpressions: []
  revisionHistoryLimit: 10
  template:
    metadata:
      annotations: {}
      labels:
        kubernetes.io/cluster-service: "true"
        nirmata.io/application.type: "cluster-addon"
        nirmata.io/component: "elasticsearch-logging"
        nirmata.io/application.addon.type: "Logging"
        version: "v5.6.4"
        k8s-app: "elasticsearch-logging"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      serviceAccountName: "elasticsearch-logging"
      containers:
      - name: "elasticsearch-logging"
        image: "k8s.gcr.io/elasticsearch:v5.6.4"
        command: []
        args: []
        ports:
        - name: "db"
          containerPort: 9200
          protocol: "TCP"
        - name: "transport"
          containerPort: 9300
          protocol: "TCP"
        env:
        - name: "NAMESPACE"
          valueFrom:
            fieldRef:
              apiVersion: "v1"
              fieldPath: "metadata.namespace"
        volumeMounts:
        - name: "elasticsearch-logging"
          mountPath: "/data"
        resources:
          limits:
            cpu: "1000m"
          requests:
            cpu: "100m"
      initContainers:
      - name: "elasticsearch-logging-init"
        image: "alpine:3.6"
        command:
        - "/sbin/sysctl"
        - "-w"
        - "vm.max_map_count=262144"
        args: []
        securityContext:
          privileged: true
  updateStrategy:
    type: "RollingUpdate"
    rollingUpdate:
      partition: 0
  volumeClaimTemplates:
  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      annotations: {}
      name: "elasticsearch-logging"
      labels: {}
    spec:
      accessModes:
      - "ReadWriteOnce"
      resources:
        limits: {}
        requests:
          storage: "1Gi"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRole"
rules:
- apiGroups:
  - ""
  nonResourceURLs: []
  resourceNames: []
  resources:
  - "namespaces"
  - "pods"
  verbs:
  - "get"
  - "watch"
  - "list"
metadata:
  annotations: {}
  name: "fluentd-es"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "fluentd-es"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "fluentd-es"
  annotations: {}
  name: "kibana-logging"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "kibana-logging"
    kubernetes.io/name: "Kibana"
    nirmata.io/component: "kibana-logging"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    k8s-app: "kibana-logging"
    nirmata.io/component: "kibana-logging"
  ports:
  - port: 5601
    protocol: "TCP"
    targetPort: "ui"

---
apiVersion: "v1"
kind: "Service"
metadata:
  namespace: "fluentd-es"
  annotations: {}
  name: "elasticsearch-logging"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "elasticsearch-logging"
    kubernetes.io/name: "Elasticsearch"
    nirmata.io/component: "elasticsearch-logging"
spec:
  clusterIP: "None"
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "ClusterIP"
  selector:
    k8s-app: "elasticsearch-logging"
    nirmata.io/component: "elasticsearch-logging"
  ports:
  - port: 9200
    protocol: "TCP"
    targetPort: "db"

---
apiVersion: "v1"
kind: "ServiceAccount"
metadata:
  namespace: "fluentd-es"
  name: "elasticsearch-logging"
  labels:
    k8s-app: "elasticsearch-logging"
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"

---
apiVersion: "v1"
kind: "Service"
metadata:
  annotations: {}
  name: "kibana"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "kibana"
    kubernetes.io/name: "Kibana"
    nirmata.io/component: "kibana-logging"
spec:
  externalIPs: []
  loadBalancerSourceRanges: []
  type: "NodePort"
  selector:
    k8s-app: "kibana-logging"
    nirmata.io/component: "kibana-logging"
  ports:
  - port: 5601
    protocol: "TCP"
    targetPort: "ui"

---
apiVersion: "rbac.authorization.k8s.io/v1"
kind: "ClusterRoleBinding"
metadata:
  annotations: {}
  name: "fluentd-es"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "fluentd-es"
subjects:
- apiGroup: ""
  kind: "ServiceAccount"
  name: "fluentd-es"
  namespace: "fluentd-es"
roleRef:
  apiGroup: ""
  kind: "ClusterRole"
  name: "fluentd-es"

---
kind: "Deployment"
apiVersion: "apps/v1"
metadata:
  namespace: "fluentd-es"
  annotations: {}
  name: "kibana-logging"
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: "Reconcile"
    k8s-app: "kibana-logging"
    nirmata.io/component: "kibana-logging"
spec:
  replicas: 1
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      k8s-app: "kibana-logging"
      nirmata.io/component: "kibana-logging"
    matchExpressions: []
  strategy:
    type: "RollingUpdate"
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations: {}
      labels:
        nirmata.io/application.addon.type: "Logging"
        nirmata.io/application.type: "cluster-addon"
        k8s-app: "kibana-logging"
        nirmata.io/component: "kibana-logging"
    spec:
      terminationGracePeriodSeconds: 30
      nodeSelector: {}
      containers:
      - name: "kibana-logging"
        image: "docker.elastic.co/kibana/kibana:5.6.4"
        command: []
        args: []
        ports:
        - name: "ui"
          containerPort: 5601
          protocol: "TCP"
        env:
        - name: "ELASTICSEARCH_URL"
          value: "http://elasticsearch-logging:9200"
        - name: "XPACK_MONITORING_ENABLED"
          value: "false"
        - name: "XPACK_SECURITY_ENABLED"
          value: "false"
        resources:
          limits:
            cpu: "1000m"
          requests:
            cpu: "100m"
